"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevnetUtils = void 0;
const axios_1 = __importDefault(require("axios"));
const starknet_1 = require("starknet");
const starknet_plugin_error_1 = require("./starknet-plugin-error");
const utils_1 = require("./utils");
class DevnetUtils {
    constructor(hre) {
        this.hre = hre;
        this.axiosInstance = axios_1.default.create({
            baseURL: this.endpoint,
            timeout: this.hre.config.starknet.requestTimeout
        });
    }
    get endpoint() {
        return `${this.hre.starknet.networkConfig.url}`;
    }
    async requestHandler(url, method, data) {
        try {
            // Make the request
            return this.axiosInstance.request({
                url,
                method,
                data
            });
        }
        catch (error) {
            const parent = error instanceof Error && error;
            const msg = `Request failed: Could not ${method} ${url}. This is a Devnet-specific functionality.
Make sure you really want to interact with Devnet and that it is running and available at ${this.endpoint}`;
            throw new starknet_plugin_error_1.StarknetPluginError(msg, parent);
        }
    }
    async restart() {
        await this.requestHandler("/restart", "POST");
    }
    async flush() {
        const response = await this.requestHandler("/postman/flush", "POST");
        return response.data;
    }
    async loadL1MessagingContract(networkUrl, address, networkId) {
        const body = {
            networkId,
            address,
            networkUrl
        };
        const response = await this.requestHandler("/postman/load_l1_messaging_contract", "POST", body);
        return response.data;
    }
    async sendMessageToL2(l2ContractAddress, functionName, l1ContractAddress, payload, nonce, paidFeeOnL1) {
        const body = {
            l2_contract_address: l2ContractAddress,
            entry_point_selector: starknet_1.selector.getSelectorFromName(functionName),
            l1_contract_address: l1ContractAddress,
            payload: payload.map((item) => (0, utils_1.numericToHexString)(item)),
            nonce: (0, utils_1.numericToHexString)(nonce),
            paid_fee_on_l1: (0, utils_1.numericToHexString)(paidFeeOnL1)
        };
        const response = await this.requestHandler("/postman/send_message_to_l2", "POST", body);
        return response.data;
    }
    async consumeMessageFromL2(l2ContractAddress, l1ContractAddress, payload) {
        const body = {
            l2_contract_address: l2ContractAddress,
            l1_contract_address: l1ContractAddress,
            payload: payload.map((item) => (0, utils_1.numericToHexString)(item))
        };
        const response = await this.requestHandler("/postman/consume_message_from_l2", "POST", body);
        return response.data;
    }
    async increaseTime(seconds) {
        const response = await this.requestHandler("/increase_time", "POST", {
            time: seconds
        });
        return response.data;
    }
    async setTime(seconds) {
        const response = await this.requestHandler("/set_time", "POST", {
            time: seconds
        });
        return response.data;
    }
    async getPredeployedAccounts() {
        const response = await this.requestHandler("/predeployed_accounts", "GET");
        return response.data;
    }
    async dump(path) {
        const response = await this.requestHandler("/dump", "POST", {
            path
        });
        return response.data;
    }
    async load(path) {
        const response = await this.requestHandler("/load", "POST", {
            path
        });
        return response.data;
    }
    async createBlock() {
        const response = await this.requestHandler("/create_block", "POST");
        return response.data;
    }
    async mint(address, amount, lite = true) {
        const response = await this.requestHandler("/mint", "POST", {
            amount,
            address,
            lite
        });
        return response.data;
    }
}
exports.DevnetUtils = DevnetUtils;
//# sourceMappingURL=devnet-utils.js.map