"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StarknetLegacyWrapper = exports.StarknetJsWrapper = void 0;
const fs_1 = require("fs");
const starknet_1 = require("starknet");
class StarknetJsWrapper {
    constructor(networkConfig) {
        this.setProvider(networkConfig);
    }
    setProvider(networkConfig) {
        this.provider = new starknet_1.SequencerProvider({
            baseUrl: networkConfig.url
        });
    }
}
exports.StarknetJsWrapper = StarknetJsWrapper;
/**
 * StarknetLegacyWrapper is meant to facilitate the discontinuation of the Starknet CLI usage within StarknetWrapper
 */
class StarknetLegacyWrapper extends StarknetJsWrapper {
    async readContract(contractPath) {
        return starknet_1.json.parse((await fs_1.promises.readFile(contractPath)).toString("ascii"));
    }
    stringifyResponse(r) {
        return typeof r !== "string"
            ? `${starknet_1.json.stringify(r, undefined, "\n").replace(/\n+/g, "\n")}\n`
            : r;
    }
    generateProcessResult(statusCode, stdout, stderr) {
        return {
            statusCode,
            stdout,
            stderr
        };
    }
    async wrapProcessResult(p) {
        return p
            .then((a) => this.generateProcessResult(0, this.stringifyResponse(a), ""))
            .catch((e) => this.generateProcessResult(1, "", this.stringifyResponse(e)));
    }
    async declare(contractPath, senderAddress, signature, nonce, maxFee) {
        const contractJson = await this.readContract(contractPath);
        const contract = starknet_1.provider.parseContract(contractJson);
        return this.wrapProcessResult(this.provider
            .declareContract({
            contract,
            senderAddress,
            signature
        }, {
            nonce,
            maxFee
        })
            .then(({ class_hash, transaction_hash }) => "DeprecatedDeclare transaction was sent.\n" +
            `Contract class hash: ${class_hash}\n` +
            `Transaction hash: ${transaction_hash}\n`));
    }
    async getTxStatus(txHash) {
        return this.wrapProcessResult(this.provider.getTransactionStatus(txHash));
    }
    async getTransactionTrace(txHash) {
        return this.wrapProcessResult(this.provider.getTransactionTrace(txHash));
    }
    async getTransactionReceipt(txHash) {
        return this.wrapProcessResult(this.provider.getTransactionReceipt(txHash));
    }
    async getTransaction(txHash) {
        return this.wrapProcessResult(this.provider.getTransaction(txHash));
    }
    async getBlock(blockIdentifier) {
        return this.wrapProcessResult(this.provider.getBlock(blockIdentifier));
    }
    async getNonce(address, blockIdentifier) {
        return this.wrapProcessResult(this.provider.getNonceForAddress(address, blockIdentifier).then(BigInt));
    }
}
exports.StarknetLegacyWrapper = StarknetLegacyWrapper;
//# sourceMappingURL=starknet-js-wrapper.js.map