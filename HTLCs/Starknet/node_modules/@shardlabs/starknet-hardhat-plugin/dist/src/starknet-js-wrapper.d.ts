import { ProcessResult } from "@nomiclabs/hardhat-docker";
import { NetworkConfig } from "hardhat/types/config";
import { BigNumberish, BlockIdentifier, SequencerProvider } from "starknet";
export declare class StarknetJsWrapper {
    provider: SequencerProvider;
    constructor(networkConfig: NetworkConfig);
    setProvider(networkConfig: NetworkConfig): void;
}
/**
 * StarknetLegacyWrapper is meant to facilitate the discontinuation of the Starknet CLI usage within StarknetWrapper
 */
export declare class StarknetLegacyWrapper extends StarknetJsWrapper {
    private readContract;
    private stringifyResponse;
    private generateProcessResult;
    private wrapProcessResult;
    declare(contractPath: string, senderAddress: string, signature: string[], nonce: string, maxFee: string): Promise<ProcessResult>;
    getTxStatus(txHash: BigNumberish): Promise<ProcessResult>;
    getTransactionTrace(txHash: BigNumberish): Promise<ProcessResult>;
    getTransactionReceipt(txHash: BigNumberish): Promise<ProcessResult>;
    getTransaction(txHash: BigNumberish): Promise<ProcessResult>;
    getBlock(blockIdentifier?: BlockIdentifier): Promise<ProcessResult>;
    getNonce(address: string, blockIdentifier?: BlockIdentifier): Promise<ProcessResult>;
}
