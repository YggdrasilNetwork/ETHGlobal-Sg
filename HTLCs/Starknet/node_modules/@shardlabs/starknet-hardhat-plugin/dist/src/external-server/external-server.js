"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalServer = exports.getFreePort = void 0;
const axios_1 = __importDefault(require("axios"));
const net_1 = __importDefault(require("net"));
const child_process_1 = require("child_process");
const starknet_plugin_error_1 = require("../starknet-plugin-error");
const integrated_devnet_logger_1 = require("./integrated-devnet-logger");
const axios_retry_1 = __importDefault(require("axios-retry"));
function sleep(amountMillis) {
    return new Promise((resolve) => {
        setTimeout(resolve, amountMillis);
    });
}
function isFreePort(port) {
    return new Promise((accept, reject) => {
        const sock = net_1.default.createConnection(port);
        sock.once("connect", () => {
            sock.end();
            accept(false);
        });
        sock.once("error", (e) => {
            sock.destroy();
            if (e.code === "ECONNREFUSED") {
                accept(true);
            }
            else {
                reject(e);
            }
        });
    });
}
async function getFreePort() {
    const defaultDevnetPort = 5050; // starting here to avoid conflicts
    const step = 1000;
    const maxPort = 65535;
    for (let port = defaultDevnetPort + step; port <= maxPort; port += step) {
        if (await isFreePort(port)) {
            return port.toString();
        }
    }
    throw new starknet_plugin_error_1.StarknetPluginError("Could not find a free port, try rerunning your command!");
}
exports.getFreePort = getFreePort;
class ExternalServer {
    constructor(host, port, isAliveURL, processName, stdout, stderr) {
        this.host = host;
        this.port = port;
        this.isAliveURL = isAliveURL;
        this.processName = processName;
        this.stdout = stdout;
        this.stderr = stderr;
        this.connected = false;
        this.connecting = false; // Flag indicating whether the proxy server is currently in the process of connecting
        this.lastError = null;
        this._isDockerDesktop = null;
        ExternalServer.cleanupFns.push(this.cleanup.bind(this));
    }
    get isDockerDesktop() {
        if (this._isDockerDesktop === null) {
            this._isDockerDesktop = this.getIsDockerDesktop();
        }
        return this._isDockerDesktop;
    }
    /**
     * Check if docker is Docker Desktop
     */
    getIsDockerDesktop() {
        const res = (0, child_process_1.spawnSync)("docker", ["system", "info"], { encoding: "utf8" });
        //stdout is null when docker command doesn't exists
        return res.stdout?.includes("Operating System: Docker Desktop");
    }
    get url() {
        return `http://${this.host}:${this.port}`;
    }
    static cleanAll() {
        this.cleanupFns.forEach((fn) => fn());
    }
    async start() {
        if (await this.isServerAlive()) {
            const msg = `Cannot spawn ${this.processName}: ${this.url} already occupied.`;
            throw new starknet_plugin_error_1.StarknetPluginError(msg);
        }
        this.childProcess = await this.spawnChildProcess();
        const logger = new integrated_devnet_logger_1.IntegratedDevnetLogger(this.stdout, this.stderr);
        this.childProcess.stdout.on("data", async (chunk) => {
            chunk = chunk.toString();
            await logger.logHandler(this.stdout, chunk);
        });
        // capture the most recent message from stderr
        this.childProcess.stderr.on("data", async (chunk) => {
            chunk = chunk.toString();
            await logger.logHandler(this.stderr, chunk);
            this.lastError = chunk;
        });
        return new Promise((resolve, reject) => {
            // called on successful start of the child process
            this.childProcess.on("spawn", async () => {
                const startTime = new Date().getTime();
                const maxWaitMillis = 60000;
                const oneSleepMillis = 500;
                // keep checking until process has failed/exited
                while (this.childProcess) {
                    const elapsedMillis = new Date().getTime() - startTime;
                    if (elapsedMillis >= maxWaitMillis) {
                        const msg = `${this.processName} connection timed out!`;
                        reject(new starknet_plugin_error_1.StarknetPluginError(msg));
                        break;
                    }
                    else if (await this.isServerAlive()) {
                        this.connected = true;
                        resolve();
                        break;
                    }
                    else {
                        await sleep(oneSleepMillis);
                    }
                }
            });
            // this only happens if childProcess completely fails to start
            this.childProcess.on("error", (error) => {
                this.childProcess = null;
                reject(error);
            });
            // handle unexpected close of process
            this.childProcess.on("close", (code) => {
                const isAbnormalExit = this.childProcess != null;
                this.childProcess = null;
                if (code !== 0 && isAbnormalExit) {
                    const circumstance = this.connected ? "running" : "connecting";
                    const moreInfo = logger.isFile(this.stderr)
                        ? "More error info in " + this.stderr
                        : "";
                    const msg = `${this.processName} exited with code=${code} while ${circumstance}. ${this.lastError}\n${moreInfo}`;
                    throw new starknet_plugin_error_1.StarknetPluginError(msg);
                }
            });
        });
    }
    stop() {
        if (!this.childProcess) {
            return;
        }
        this.cleanup();
        this.childProcess = null;
    }
    async isServerAlive() {
        if (this.port === null)
            return false;
        try {
            await axios_1.default.get(`${this.url}/${this.isAliveURL}`);
            return true;
        }
        catch (err) {
            // cannot connect, so address is not occupied
            return false;
        }
    }
    async post(data) {
        await this.ensurePort();
        await this.ensureStarted();
        // The default value of retries, which is 3, does not work on CircleCI
        (0, axios_retry_1.default)(axios_1.default, { retries: 5, retryDelay: axios_retry_1.default.exponentialDelay });
        const hre = await Promise.resolve().then(() => __importStar(require("hardhat")));
        try {
            const response = await axios_1.default.post(this.url, data, {
                timeout: hre.config.starknet.requestTimeout
            });
            return response.data;
        }
        catch (error) {
            const parent = error instanceof Error && error;
            const msg = `Error in interaction with Starknet CLI proxy server\n${error}`;
            throw new starknet_plugin_error_1.StarknetPluginError(msg, parent);
        }
    }
    async ensurePort() {
        if (this.port) {
            return;
        }
        this.port = await getFreePort();
    }
    async ensureStarted() {
        if (this.connected || this.connecting) {
            return;
        }
        this.connecting = true;
        await this.start();
        this.connecting = false;
    }
}
ExternalServer.cleanupFns = [];
exports.ExternalServer = ExternalServer;
//# sourceMappingURL=external-server.js.map