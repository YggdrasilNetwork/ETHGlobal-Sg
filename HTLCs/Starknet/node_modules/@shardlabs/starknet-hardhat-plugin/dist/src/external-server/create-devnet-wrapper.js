"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createIntegratedDevnet = void 0;
const starknet_plugin_error_1 = require("../starknet-plugin-error");
const constants_1 = require("../constants");
const utils_1 = require("../utils");
const docker_devnet_1 = require("./docker-devnet");
const venv_devnet_1 = require("./venv-devnet");
function getDevnetImage(dockerizedVersion = constants_1.DEFAULT_DEVNET_DOCKER_IMAGE_TAG) {
    let repository = undefined;
    let tag = undefined;
    // check if of format <image>:<tag>
    if (dockerizedVersion.includes(":")) {
        const imageParts = dockerizedVersion.split(":");
        if (imageParts.length !== 2) {
            const msg = `Invalid dockerizedVersion: "${dockerizedVersion}". Expected <tag> or <image>:<tag>`;
            throw new starknet_plugin_error_1.StarknetPluginError(msg);
        }
        repository = imageParts[0];
        tag = imageParts[1];
    }
    else {
        // treat as a devnet-py tag
        repository = constants_1.DEVNET_DOCKER_REPOSITORY;
        tag = (0, utils_1.getDevnetImageTagByArch)(dockerizedVersion);
    }
    return { repository, tag };
}
function createIntegratedDevnet(hre) {
    const devnetNetwork = (0, utils_1.getNetwork)(constants_1.INTEGRATED_DEVNET, hre.config.networks, `networks["${constants_1.INTEGRATED_DEVNET}"]`);
    const { hostname, port } = new URL(devnetNetwork.url || constants_1.INTEGRATED_DEVNET_URL);
    if (hostname !== "localhost" && hostname !== "127.0.0.1") {
        throw new starknet_plugin_error_1.StarknetPluginError("Integrated devnet works only with localhost and 127.0.0.1");
    }
    if (devnetNetwork.venv) {
        return new venv_devnet_1.VenvDevnet(devnetNetwork.venv, hostname, port, devnetNetwork?.args, devnetNetwork?.stdout, devnetNetwork?.stderr, devnetNetwork.vmLang);
    }
    if (hostname === "localhost") {
        throw new starknet_plugin_error_1.StarknetPluginError("Dockerized integrated devnet works only with host 127.0.0.1");
    }
    const image = getDevnetImage(devnetNetwork.dockerizedVersion);
    return new docker_devnet_1.DockerDevnet(image, hostname, port, devnetNetwork?.args, devnetNetwork?.stdout, devnetNetwork?.stderr, devnetNetwork.vmLang);
}
exports.createIntegratedDevnet = createIntegratedDevnet;
//# sourceMappingURL=create-devnet-wrapper.js.map