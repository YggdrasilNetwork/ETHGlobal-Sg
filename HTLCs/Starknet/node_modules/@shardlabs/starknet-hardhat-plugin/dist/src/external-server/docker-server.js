"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DockerServer = void 0;
const hardhat_docker_1 = require("@nomiclabs/hardhat-docker");
const child_process_1 = require("child_process");
const external_server_1 = require("./external-server");
class DockerServer extends external_server_1.ExternalServer {
    constructor(image, host, externalPort, isAliveURL, containerName, args, stdout, stderr) {
        // to make name unique and allow multiple simultaneous instances
        containerName += "-" + Math.random().toString().slice(2);
        super(host, externalPort, isAliveURL, containerName, stdout, stderr);
        this.image = image;
        this.args = args;
        this.containerName = containerName;
    }
    async pullImage() {
        if (!this.docker) {
            this.docker = await hardhat_docker_1.HardhatDocker.create();
        }
        if (!(await this.docker.hasPulledImage(this.image))) {
            console.log(`Pulling image ${hardhat_docker_1.HardhatDocker.imageToRepoTag(this.image)}`);
            await this.docker.pullImage(this.image);
        }
    }
    async spawnChildProcess(options) {
        await this.pullImage();
        const formattedImage = `${this.image.repository}:${this.image.tag}`;
        const args = [
            "run",
            "--rm",
            "--name",
            this.containerName,
            ...(await this.getDockerArgs()),
            formattedImage,
            ...(await this.getContainerArgs())
        ];
        return (0, child_process_1.spawn)("docker", args, options);
    }
    cleanup() {
        (0, child_process_1.spawnSync)("docker", ["kill", this.containerName]);
        this.childProcess?.kill();
    }
}
exports.DockerServer = DockerServer;
//# sourceMappingURL=docker-server.js.map