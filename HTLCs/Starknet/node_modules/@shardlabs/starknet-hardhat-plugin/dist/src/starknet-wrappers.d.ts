import { Image, ProcessResult } from "@nomiclabs/hardhat-docker";
import { HardhatRuntimeEnvironment } from "hardhat/types";
import { ExternalServer } from "./external-server";
import { FeeEstimation } from "./starknet-types";
import { BlockNumber } from "./types";
interface CompileWrapperOptions {
    file: string;
    output: string;
    abi: string;
    cairoPath: string;
    accountContract: boolean;
    disableHintValidation: boolean;
}
interface CairoToSierraOptions {
    path: string;
    output: string;
    binDirPath?: string;
    replaceIds?: boolean;
    allowedLibfuncsListName?: string;
    allowedLibfuncsListFile?: string;
    singleFile?: boolean;
}
interface SierraToCasmOptions {
    file: string;
    output: string;
    binDirPath?: string;
    allowedLibfuncsListName?: string;
    allowedLibfuncsListFile?: string;
    addPythonicHints?: boolean;
}
interface DeclareWrapperOptions {
    contract: string;
    maxFee: string;
    signature?: string[];
    token?: string;
    sender?: string;
    nonce?: string;
}
interface TxHashQueryWrapperOptions {
    hash: string;
}
interface BlockQueryWrapperOptions {
    number?: BlockNumber;
    hash?: string;
}
interface NonceQueryWrapperOptions {
    address: string;
    blockHash?: string;
    blockNumber?: BlockNumber;
}
export declare abstract class StarknetWrapper {
    protected externalServer: ExternalServer;
    protected hre: HardhatRuntimeEnvironment;
    constructor(externalServer: ExternalServer, hre: HardhatRuntimeEnvironment);
    protected get gatewayUrl(): string;
    execute(command: "starknet-compile-deprecated" | "get_class_hash" | "get_contract_class" | "get_contract_class_hash" | "get_compiled_class_hash", args: string[]): Promise<ProcessResult>;
    protected prepareDeprecatedCompileOptions(options: CompileWrapperOptions): string[];
    deprecatedCompile(options: CompileWrapperOptions): Promise<ProcessResult>;
    compileCairoToSierra(options: CairoToSierraOptions): Promise<ProcessResult>;
    compileSierraToCasm(options: SierraToCasmOptions): Promise<ProcessResult>;
    protected prepareCairoToSierraOptions(options: CairoToSierraOptions): string[];
    protected prepareSierraToCasmOptions(options: SierraToCasmOptions): string[];
    protected getCairo1Command(binDirPath: string, binCommand: string, args: string[]): string[];
    declare(options: DeclareWrapperOptions): Promise<ProcessResult>;
    getTxStatus(options: TxHashQueryWrapperOptions): Promise<ProcessResult>;
    getTransactionTrace(options: TxHashQueryWrapperOptions): Promise<ProcessResult>;
    getTransactionReceipt(options: TxHashQueryWrapperOptions): Promise<ProcessResult>;
    getTransaction(options: TxHashQueryWrapperOptions): Promise<ProcessResult>;
    getBlock(options: BlockQueryWrapperOptions): Promise<ProcessResult>;
    getNonce(options: NonceQueryWrapperOptions): Promise<ProcessResult>;
    getClassHash(artifactPath: string): Promise<string>;
    getCompiledClassHash(casmPath: string): Promise<string>;
    getSierraContractClassHash(casmPath: string): Promise<string>;
    estimateMessageFee(functionName: string, fromAddress: string, toAddress: string, inputs: string[]): Promise<FeeEstimation>;
}
export declare class DockerWrapper extends StarknetWrapper {
    private image;
    private rootPath;
    constructor(image: Image, rootPath: string, cairoPaths: string[], hre: HardhatRuntimeEnvironment);
}
export declare class VenvWrapper extends StarknetWrapper {
    constructor(venvPath: string, hre: HardhatRuntimeEnvironment);
    protected get gatewayUrl(): string;
}
export {};
